/*!

\page developingplugins.html
\title Developing Plugins

The QtBrowserPlugin solution makes it easy to write browser plugins
that can be used in Netscape, Mozilla FireFox, Opera, and any other
web browser supporting the "npruntime" API:

http://www.mozilla.org/projects/plugins/
http://www.mozilla.org/projects/plugins/npruntime.html

Current versions of Microsoft Internet Explorer do not support this
API. However, you can use the ActiveQt framework to compile a 
single plugin library that works with all web browsers.

\tableofcontents

\section1 Implementing plugins

Since any QWidget or QObject subclass can be turned into a plugin with
little effort it is usually easiest to do the development as a 
stand-alone Qt application - debugging plugins is cumbersome.

Make sure that the subclasses you want to export use the Q_OBJECT macro 
and provide a default constructor. Use the Q_CLASSINFO macro to specify
a list of MIME types each of your classes supports, and export the
classes through the QtNPFactory macros:

\quotefromfile grapher.cpp
\skipto QTNPFACTORY_BEGIN
\printuntil QTNPFACTORY_END()

Include the \c qtbrowserplugin.pri in your .pro file, and regenerate
the makefile with qmake. The resulting makefile will generate a shared
library with a file name starting with \c{"np"} - this is required
by all browsers to recognize the library as a plugin.

\section2 Windows specific notes

On Windows it is required to link a version resource into the plugin
library. To do that, create an .rc file (a plain-text file) and add
it to the \c RC_FILE variable of your project. The .rc file needs to
contain a version description like here:

\quotefromfile grapher.rc
\skipto VERSION
\printuntil VarFileInfo
\printuntil END
\printuntil END

\section3 Enabling ActiveX support

To build a plugin project with ActiveX support, use ActiveQt's QAxServer
module by adding the following line to your project:

CONFIG += qaxserver

Also, add the following line to your resource file

\c{1 TYPELIB "thisfile.rc"}

In your plugin code, use Q_CLASSINFO and the QAxFactory macros as usual.

When you build the plugin, then ActiveQt will perform the build steps
required to turn the plugin library into an ActiveX control server 
which provides your plugin classes not only to browsers supporting the 
npruntime API, but also to browsers supporting ActiveX controls 
(i.e. Internet Explorer).

However, not that calling QtNPBindable APIs will not do anything when 
the browser does not support the npruntime API. In some cases, QAxBindable
provides equivalent APIs (i.e. for reading incoming data).

\section2 Unix specific notes

On Unix/Linux, QtBrowserPlugin uses the XEmbed protocol. This is a
fairly recent addition to the NPP plugin API. At the time of writing,
it is not supported by the Opera and Konqueror browsers. Firefox and
other Mozilla/Gecko-based browsers do support it.

Update: Opera version 9.50 will support the XEmbed
protocol. QtBrowserPlugin is tested successfully with the beta release
of Opera 9.50. One known issue: Opera does not automatically register
the extension part of the MIME description. If required, work around
by adding it manually in the \c{Preferences->Advanced->Download}
dialog. (e.g. add "g1n" to "application/x-graphable" to make the
grapher example work).


\section3 Known Issues on Unix/Linux

There are two known issues that may cause the plugin to crash on
initialization, possibly taking the browser down with it:

\list 
\o Double initialization of glib/threading. This is fixed in Qt 4.3.1 and
later.

\o Symbol clash with other instances of the Qt libraries. Although
Firefox/Gecko itself does not use Qt, it is not uncommon on Linux that
another plugin or style engine is present that will load the Qt
dynamic libraries. When another plugin based on the Qt 4 dynamically
libraries are added, some symbol clashes between the different Qt
instances will occur, leading to a crash. With Qt 4.4 and later, this
is easily worked around by configuring your Qt build to use a separate
namespace. Just add the \c{-qtnamespace=SomeNamespace} option to \c
configure. For Qt 4.3, it is possible to work around this by
building the Qt 4 library statically, and link them into
the plugin executable with a special linker option. See \c
qtbrowserplugin.pri for details. 
\endlist

In addition, Firefox may emit this warning when initializing the
plugin: \c{_XEMBED_INFO property has wrong type}. This is fixed in Qt
4.3.1 and later.

\section2 Mac OSX specific notes

To build a browser plugin on Mac, two plain-text resource files are
needed: an \c Info.plist file and a \c .r file. To create these files,
it is easiest to use the ones provided with the QtBrowserPlugin
examples as templates, editing as necessary. Then add them to your
project (\c .pro file) like this:

\quotefromfile grapher.pro
\skipto QMAKE_INFO_PLIST
\printuntil QMAKE_BUNDLE_DATA

\section3 Known Issues on Mac

\list
\o After navigating away from the webpage with the plugin, and then back
again, the plugin no longer shows up or runs. No workaround currently
known.

\o Some painting issues. Fixed in Qt 4.3.1 and later.
\endlist

\section1 Installing and using Plugins

Most browsers provide a UI to display all loaded plugins.  Use this
functionality to diagnose problems.

The plugin will need to load the Qt libraries at runtime (unless they
are statically linked into the plugin). Hence, the required Qt dynamic
libraries (at least QtCore, QtGui, and QtNetwork) must be located in a
directory which the system searches for DLLs. This may or may not
include the directory where the plugin itself is located, depending on
the OS and browser. 

Windows, Netscape-style browsers: To install the plugin, copy the
plugin library in the "plugins" directory of the browser. See
\c{src/qtbrowserplugin.pri} for some typical paths.

Windows, Internet Explorer: The Makefile generated by qmake by default
runs the necessary commands to register the plugin as an ActiveX
server (if \c CONFIG includes \c qaxserver). To unregister, use the
following command:

\code
c:\Qt-x.y.z\bin\idc.exe path\to\myplugin.dll /unregserver 
\endcode

Mac: The build will result in a directory called \c
myplugin.plugin. To install, copy this directory with all contents to
\c{/Library/Internet Plugins}.

Unix: Copy the file \c myplugin.so to the browser or system plugin
directory, typically \c /usr/lib/browser-plugins. The path to the Qt
libraries may be set in the LD_LIBRARY_PATH environment variable of
the browser process.

\section2 Using the plugin in HTML

Different browser support different embedding tags, but the following 
should work with Netscape, FireFox, Opera and Internet Explorer (if the
plugin has been compiled as an ActiveX server as well).

\section3 Object with data:

Objects can be initialized with a data file, which will be delivered to
the plugin at some point after plugin creation to the plugin through the 
QtNPBindable::readData() virtual function.
\footnote
If files viewed by a plugin are provided by an HTTP server 
(using a \c{http://...} URL) then the server must be configured to send 
the correct MIME type for the file, e.g. by editing Apache's 
\c{mime.types} file. If the files are viewed via a \c{file://...} URL, 
then the browser will use the filename extension to decide the file type
(and hence the plugin to load) - the user may need to set the filename
extension in the Helpers or Applications section of their browser preferences.
\endfootnote

\code
<object type="application/x-graphable" data="graph.g1n" width=50% height=300>
Plugin not installed!
</object>
\endcode

\code
<object data="http://doc.trolltech.com/3.3/graph.g1n" width=50% height=300>
Plugin not installed!
</object>
\endcode

Note that some browsers will not display or immediately unload the plugin 
if the data file does not exist, while other browsers will display the plugin 
without ever calling readData().

\section3 Objects without data:

\code
<embed type="trivial/very" [property]=[value]>
\endcode

\section3 Not working with all browsers

\list
\o \c{<embed src=...>} Internet Explorer does not receive data
\o \c{<object type=...>} Opera does not display plugin without \c data attribute
\o \c{<object classid=...>} FireFox and Netscape don't display
\o \c{<object type=... data=...><param ...>} Internet Explorer does not receive data
\endlist

For additional information, see http://devedge-temp.mozilla.org/library/manuals

\section2 Scripting

Plugins embedded into browsers that support the respecive NPAPI extensions as
well as ActiveX controls can be accessed from JavaScript in the HTML page.

\quotefromfile ../examples/trivial/scripting.qdoc
\skipto <object
\printto var

Before the object can be accessed, some browsers require it to be located 
based on the \c id in the \c object tag.

\section3 JavaScript calling slots and properties

\printto ScriptableObject.text

Object properties and public slots can then be accessed as usual. The QtBrowserPlugin
implementation supports properties and slots that have parameters and types that 
QVariant can be convert to and from strings, or that are QObjects. Only public slots
and scriptable properties are exposed. If the QObject class sets a "ToSuperClass" 
Q_CLASSINFO, then only slots and properties up to the specified superclass are exposed.
See the QAxServer documentation provided with Qt for more information.

\section3 The plugin calling JavaScript

JavaScript functions can be connected to Qt signals emitted by the Qt plugin object.

\printuntil </script>

Assign a function to a property of the object with the same name as the signal. Overloads
(i.e. two signal with the same name, but different parameters) are not possible.

\printuntil </script>

Internet Explorer requires a special syntax that is not compatible with other browsers,
but the IE-specific function can just call the other functions.

\section3 Using plugins in forms

Plugin objects can be embedded as form elements. To specify which property value
the plugin should report to the form upon submission, specify the name of the
property as the DefaultProperty using a Q_CLASSINFO entry:

\code
Q_OBJECT
Q_CLASSINFO("MIME", "trivial/very:xxx:Trivial and useless")
Q_CLASSINFO("DefaultProperty", "text")
\endcode

In the HTML page, embed the object as usual:

\code
<form method="get" action="http://www.server.com/search.asp">
<table>
<tr>
 <td>Search:</td>
 <td><object type="trivial/very" name="text" WIDTH=100 HEIGHT=20></object></td>
 <td><input type="submit" value="Check"></td>
</tr>
</table>
</form>
\endcode

Clicking the button will make the browser request a URL

\c http://www.server.com/search.asp?text=[value from object]

The property type needs to be convertible to a string.
*/
